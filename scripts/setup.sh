#!/bin/bash

# DevSecOps AWS Flow Setup Script
# This script sets up the complete DevSecOps environment

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    local missing_tools=()
    
    if ! command_exists aws; then
        missing_tools+=("aws-cli")
    fi
    
    if ! command_exists terraform; then
        missing_tools+=("terraform")
    fi
    
    if ! command_exists kubectl; then
        missing_tools+=("kubectl")
    fi
    
    if ! command_exists docker; then
        missing_tools+=("docker")
    fi
    
    if ! command_exists node; then
        missing_tools+=("nodejs")
    fi
    
    if ! command_exists npm; then
        missing_tools+=("npm")
    fi
    
    if [ ${#missing_tools[@]} -ne 0 ]; then
        error "Missing required tools: ${missing_tools[*]}"
        echo "Please install the missing tools and run this script again."
        exit 1
    fi
    
    log "All prerequisites are installed!"
}

# Install dependencies
install_dependencies() {
    log "Installing dependencies..."
    
    # Install root dependencies
    if [ -f "package.json" ]; then
        npm install
        log "Root dependencies installed"
    fi
    
    # Install security dependencies
    if [ -d "security" ] && [ -f "security/package.json" ]; then
        cd security
        npm install
        cd ..
        log "Security dependencies installed"
    fi
    
    # Install microservice dependencies
    for service in api auth gateway database; do
        if [ -d "microservices/$service" ] && [ -f "microservices/$service/package.json" ]; then
            cd "microservices/$service"
            npm install
            cd ../..
            log "$service microservice dependencies installed"
        fi
    done
}

# Setup AWS credentials
setup_aws() {
    log "Setting up AWS configuration..."
    
    # Check if AWS CLI is configured
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        warn "AWS CLI is not configured. Please run 'aws configure' to set up your credentials."
        echo "Required AWS permissions:"
        echo "- AmazonBedrockFullAccess"
        echo "- AmazonEKSClusterPolicy"
        echo "- AmazonRDSFullAccess"
        echo "- AmazonSecretsManagerFullAccess"
        echo "- AWSConfigRole"
        echo "- SecurityHubFullAccess"
        read -p "Press Enter after configuring AWS CLI..."
    fi
    
    # Get AWS account info
    local account_id=$(aws sts get-caller-identity --query Account --output text)
    local region=$(aws configure get region)
    
    log "AWS Account ID: $account_id"
    log "AWS Region: $region"
    
    # Check Bedrock access
    if aws bedrock list-foundation-models --region us-east-1 >/dev/null 2>&1; then
        log "AWS Bedrock access confirmed"
    else
        warn "AWS Bedrock access not available. Please request access to Claude models."
    fi
}

# Setup Kubernetes
setup_kubernetes() {
    log "Setting up Kubernetes configuration..."
    
    local cluster_name="devsecops-dev-eks"
    local region=$(aws configure get region)
    
    # Update kubeconfig
    if aws eks update-kubeconfig --region "$region" --name "$cluster_name" >/dev/null 2>&1; then
        log "Kubernetes configuration updated for cluster: $cluster_name"
    else
        warn "EKS cluster '$cluster_name' not found. Please deploy infrastructure first."
        return 1
    fi
    
    # Verify cluster access
    if kubectl get nodes >/dev/null 2>&1; then
        log "Kubernetes cluster access confirmed"
        kubectl get nodes
    else
        warn "Cannot access Kubernetes cluster"
        return 1
    fi
}

# Create security reports directory
setup_security() {
    log "Setting up security scanning..."
    
    mkdir -p security-reports
    log "Security reports directory created"
    
    # Create sample security configuration
    cat > security-reports/.gitkeep << EOF
# This directory contains security scan reports
# Reports are generated by the security scanning pipeline
EOF
}

# Build applications
build_applications() {
    log "Building applications..."
    
    # Build microservices
    for service in api auth gateway database; do
        if [ -d "microservices/$service" ]; then
            log "Building $service microservice..."
            cd "microservices/$service"
            if [ -f "package.json" ] && grep -q "build" package.json; then
                npm run build
                log "$service microservice built successfully"
            else
                info "$service microservice has no build script, skipping..."
            fi
            cd ../..
        fi
    done
}

# Run tests
run_tests() {
    log "Running tests..."
    
    # Run security tests
    if [ -d "security" ] && [ -f "security/package.json" ]; then
        cd security
        if npm run test >/dev/null 2>&1; then
            log "Security tests passed"
        else
            warn "Security tests failed"
        fi
        cd ..
    fi
    
    # Run microservice tests
    for service in api auth gateway database; do
        if [ -d "microservices/$service" ]; then
            cd "microservices/$service"
            if [ -f "package.json" ] && grep -q "test" package.json; then
                if npm test >/dev/null 2>&1; then
                    log "$service microservice tests passed"
                else
                    warn "$service microservice tests failed"
                fi
            fi
            cd ../..
        fi
    done
}

# Run security scan
run_security_scan() {
    log "Running security scan..."
    
    if [ -f "scripts/security-scan.js" ]; then
        node scripts/security-scan.js
        log "Security scan completed"
    else
        warn "Security scan script not found"
    fi
}

# Main setup function
main() {
    log "Starting DevSecOps AWS Flow Setup..."
    
    check_prerequisites
    install_dependencies
    setup_aws
    setup_security
    
    # Try to setup Kubernetes (might fail if infrastructure not deployed)
    if setup_kubernetes; then
        build_applications
        run_tests
        run_security_scan
    else
        warn "Kubernetes setup skipped - infrastructure not deployed yet"
    fi
    
    log "Setup completed successfully!"
    echo ""
    info "Next steps:"
    echo "1. Deploy infrastructure: make infra-apply"
    echo "2. Deploy applications: make deploy-k8s"
    echo "3. Start monitoring: make monitor-start"
    echo "4. Run security scan: make security-scan"
}

# Run main function
main "$@"
